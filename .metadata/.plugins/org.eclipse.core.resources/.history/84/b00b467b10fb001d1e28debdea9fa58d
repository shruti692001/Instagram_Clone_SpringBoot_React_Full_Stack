package com.instagram.api.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.instagram.api.exceptions.UserException;
import com.instagram.api.model.UserModel;
import com.instagram.api.response.MessageResponse;
import com.instagram.api.service.UserService;

@RestController
@RequestMapping("/api/users")
public class UserController {

	@Autowired
	private UserService userService;

	@GetMapping("")
	public ResponseEntity<List<UserModel>> findAllUserHandler() throws UserException {
		List<UserModel> users = userService.findAllUser();

		return new ResponseEntity<List<UserModel>>(users, HttpStatus.OK);
	}

	@GetMapping("id/{id}")
	public ResponseEntity<UserModel> findUserByIdHandler(@PathVariable Integer id) throws UserException {
		UserModel user = userService.findUserById(id);

		return new ResponseEntity<UserModel>(user, HttpStatus.OK);
	}

	@GetMapping("username/{username}")
	public ResponseEntity<UserModel> findByUsernameHandler(@PathVariable("username") String username)
			throws UserException {
		UserModel user = userService.findUserByUsername(username);

		return new ResponseEntity<UserModel>(user, HttpStatus.ACCEPTED);
	}

	@GetMapping("/m/{userIds}")
	public ResponseEntity<List<UserModel>> findAllUserByUserIdsHandler(@PathVariable List<Integer> userIds) {
		List<UserModel> users = userService.findUsersByUserIds(userIds);

		return new ResponseEntity<List<UserModel>>(users, HttpStatus.ACCEPTED);
	}

	@GetMapping("/search")
	public ResponseEntity<List<UserModel>> searchUserHandler(@RequestParam("q") String query) throws UserException {
		List<UserModel> users = userService.searchUser(query);

		return new ResponseEntity<List<UserModel>>(users, HttpStatus.OK);
	}

	@PutMapping("/follow/{followUserId}")
	public ResponseEntity<MessageResponse> followUserHandler(@PathVariable Integer followUserId,
			@RequestHeader("Authorization") String token) throws UserException {

		UserModel user = userService.findUserProfile(token);
		String message = userService.followUser(user.getId(), followUserId);

		MessageResponse res = new MessageResponse(message);

		return new ResponseEntity<MessageResponse>(res, HttpStatus.OK);
	}

	@PutMapping("/unfallow/{unfollowUserId}")
	public ResponseEntity<MessageResponse> unfollowUserHandler(@PathVariable Integer unfollowUserId,
			@RequestHeader("Authorization") String token) throws UserException {
	
		UserModel user = userService.findUserProfile(token);
		String message = userService.unfollowUser(user.getId(), unfollowUserId);

		MessageResponse res = new MessageResponse(message);

		return new ResponseEntity<MessageResponse>(res, HttpStatus.OK);
	}
	
	@GetMapping("/req")
	public ResponseEntity<UserModel> findUserProfileHandler(@RequestHeader("Authorization") String token)
			throws UserException{
		
		UserModel user=userService.findUserProfile(token);
		
		return new ResponseEntity<UserModel>(user,HttpStatus.ACCEPTED);
	}

	@PutMapping("/account/edit")
	public ResponseEntity<UserModel> updateUserHandler(@RequestBody UserModel user) throws UserException {
		UserModel updatedUser = userService.updateUserDetails(user, user);

		return new ResponseEntity<UserModel>(updatedUser, HttpStatus.OK);
	}
}
